diff --git a/Tool_src/subread-2.0.1/src/HelperFunctions.c b/Tool_src/subread-2.0.1/src/HelperFunctions.c
index d6b4c96..1718b1c 100644
--- a/Tool_src/subread-2.0.1/src/HelperFunctions.c
+++ b/Tool_src/subread-2.0.1/src/HelperFunctions.c
@@ -966,7 +966,8 @@ int mathrand_str(char * str_buff){
 }
 
 int mac_or_rand_str(char * str_buff){
-	return mac_str(str_buff) && rand_str(str_buff) && mathrand_str(str_buff);
+	// return mac_str(str_buff) && rand_str(str_buff) && mathrand_str(str_buff);
+    return rand_str(str_buff) && mathrand_str(str_buff);
 }
 
 #define PI_LONG 3.1415926535897932384626434L
diff --git a/Tool_src/subread-2.0.1/src/Makefile.Linux b/Tool_src/subread-2.0.1/src/Makefile.Linux
index 56a15f7..004ee12 100644
--- a/Tool_src/subread-2.0.1/src/Makefile.Linux
+++ b/Tool_src/subread-2.0.1/src/Makefile.Linux
@@ -1,15 +1,15 @@
 #MACOS = -D MACOS 
 
 
-CC_EXEC = gcc
+CC_EXEC = emcc
 OPT_LEVEL = 3
 
 include makefile.version
 -include ~/.R/DBPZ_debug_makefile
 
-CCFLAGS = -mtune=core2 ${MACOS} -O${OPT_LEVEL} -DMAKE_FOR_EXON  -D MAKE_STANDALONE -D SUBREAD_VERSION=\"${SUBREAD_VERSION}\"  -D_FILE_OFFSET_BITS=64 ${WARNING_LEVEL} 
-LDFLAGS = ${STATIC_MAKE} -pthread -lz ${MACOS} -O${OPT_LEVEL} -DMAKE_FOR_EXON -D MAKE_STANDALONE -lm
-CC = ${CC_EXEC}  ${CCFLAGS}  -fmessage-length=0  -ggdb 
+CCFLAGS = ${MACOS} -O${OPT_LEVEL} -DMAKE_FOR_EXON -D MAKE_STANDALONE -D SUBREAD_VERSION=\"${SUBREAD_VERSION}\" #-D_FILE_OFFSET_BITS=64 ${WARNING_LEVEL} # bit64 gives errors while running # make for exon cannot be disabled
+LDFLAGS = ${STATIC_MAKE} -pthread -lz ${MACOS} -O${OPT_LEVEL} -D MAKE_STANDALONE -lm -DMAKE_FOR_EXON
+CC = ${CC_EXEC}  ${CCFLAGS} -fmessage-length=0  -ggdb
 
 
 ALL_LIBS= core core-junction core-indel sambam-file sublog gene-algorithms hashtable input-files sorted-hashtable gene-value-index exon-algorithms HelperFunctions interval_merge long-hashtable core-bigtable seek-zlib input-blc
@@ -17,11 +17,12 @@ ALL_OBJECTS=$(addsuffix .o, ${ALL_LIBS})
 ALL_H=$(addsuffix .h, ${ALL_LIBS})
 ALL_C=$(addsuffix .c, ${ALL_LIBS})
 
-all: genRandomReads detectionCall sublong repair txUnique featureCounts removeDup exactSNP subread-buildindex subindel  subread-align subjunc qualityScores subread-fullscan propmapped flattenGTF # samMappedBases mergeVCF  testZlib
+# all: genRandomReads detectionCall sublong repair txUnique featureCounts removeDup exactSNP subread-buildindex subindel  subread-align subjunc qualityScores subread-fullscan propmapped flattenGTF # samMappedBases mergeVCF  testZlib
+all: subread-buildindex.o subread-align.o exactSNP.o
 	mkdir -p ../bin/utilities
-	mv longread-one/LRM longread-one/sublong
-	mv longread-one/sublong subread-align subjunc featureCounts  subindel exactSNP subread-buildindex ../bin/
-	mv detectionCall genRandomReads repair propmapped qualityScores removeDup subread-fullscan txUnique flattenGTF ../bin/utilities
+	# mv longread-one/LRM longread-one/sublong
+	mv subread-align.o subread-buildindex.o exactSNP.o ../bin/
+	# mv detectionCall genRandomReads repair propmapped qualityScores removeDup subread-fullscan txUnique flattenGTF ../bin/utilities
 	@echo
 	@echo "###########################################################"
 	@echo "#                                                         #"
@@ -32,61 +33,61 @@ all: genRandomReads detectionCall sublong repair txUnique featureCounts removeDu
 	@echo "###########################################################"
 	@echo
 
-sublong: longread-one/longread-mapping.c  ${ALL_OBJECTS}
-	echo " " > longread-one/make.version
-	rm -f longread-one/*.o
-	cd longread-one && $(MAKE)
+# sublong: longread-one/longread-mapping.c  ${ALL_OBJECTS}
+# 	echo " " > longread-one/make.version
+# 	rm -f longread-one/*.o
+# 	cd longread-one && $(MAKE)
 
-genRandomReads: gen_rand_reads.c ${ALL_OBJECTS}
-	${CC} -o genRandomReads gen_rand_reads.c ${ALL_OBJECTS} ${LDFLAGS}
+# genRandomReads: gen_rand_reads.c ${ALL_OBJECTS}
+# 	${CC} -o genRandomReads gen_rand_reads.c ${ALL_OBJECTS} ${LDFLAGS}
 
-flattenGTF: flattenAnnotations.c ${ALL_OBJECTS}
-	${CC} -o flattenGTF flattenAnnotations.c  ${ALL_OBJECTS} ${LDFLAGS}
+# flattenGTF: flattenAnnotations.c ${ALL_OBJECTS}
+# 	${CC} -o flattenGTF flattenAnnotations.c  ${ALL_OBJECTS} ${LDFLAGS}
 
-detectionCall: detection-calls.c	 ${ALL_OBJECTS}
-	${CC} -o detectionCall detection-calls.c  ${ALL_OBJECTS} ${LDFLAGS}
+# detectionCall: detection-calls.c	 ${ALL_OBJECTS}
+# 	${CC} -o detectionCall detection-calls.c  ${ALL_OBJECTS} ${LDFLAGS}
 
-repair: read-repair.c	 ${ALL_OBJECTS}
-	${CC} -o repair read-repair.c  ${ALL_OBJECTS} ${LDFLAGS}
+# repair: read-repair.c	 ${ALL_OBJECTS}
+# 	${CC} -o repair read-repair.c  ${ALL_OBJECTS} ${LDFLAGS}
 
-txUnique: tx-unique.c tx-unique.h	 ${ALL_OBJECTS}
-	${CC} -o txUnique tx-unique.c  ${ALL_OBJECTS} ${LDFLAGS}
+# txUnique: tx-unique.c tx-unique.h	 ${ALL_OBJECTS}
+# 	${CC} -o txUnique tx-unique.c  ${ALL_OBJECTS} ${LDFLAGS}
 
-globalReassembly: global-reassembly.c ${ALL_OBJECTS}
-	${CC} -o globalReassembly  global-reassembly.c ${ALL_OBJECTS} ${LDFLAGS}
+# globalReassembly: global-reassembly.c ${ALL_OBJECTS}
+# 	${CC} -o globalReassembly  global-reassembly.c ${ALL_OBJECTS} ${LDFLAGS}
 
-propmapped: propmapped.c ${ALL_OBJECTS}
-	${CC} -o propmapped propmapped.c ${ALL_OBJECTS} ${LDFLAGS}
+# propmapped: propmapped.c ${ALL_OBJECTS}
+# 	${CC} -o propmapped propmapped.c ${ALL_OBJECTS} ${LDFLAGS}
 
-exactSNP: SNPCalling.c SNPCalling.h  ${ALL_OBJECTS}
-	${CC}  -o exactSNP SNPCalling.c  ${ALL_OBJECTS} ${LDFLAGS}
+exactSNP.o: SNPCalling.c SNPCalling.h  ${ALL_OBJECTS}
+	${CC} -r -o exactSNP.o SNPCalling.c  ${ALL_OBJECTS} ${LDFLAGS}
 
-subread-buildindex: index-builder.c subread.h ${ALL_OBJECTS}
-	${CC}  -o subread-buildindex  index-builder.c ${ALL_OBJECTS} ${LDFLAGS}
+subread-buildindex.o: index-builder.c subread.h ${ALL_OBJECTS}
+	${CC} -r -o subread-buildindex.o  index-builder.c ${ALL_OBJECTS} ${LDFLAGS}
 
-removeDup: removeDupReads.c removeDupReads.h subread.h ${ALL_OBJECTS}
-	${CC} -o  removeDup removeDupReads.c  ${ALL_OBJECTS} ${LDFLAGS}
+# removeDup: removeDupReads.c removeDupReads.h subread.h ${ALL_OBJECTS}
+# 	${CC} -o  removeDup removeDupReads.c  ${ALL_OBJECTS} ${LDFLAGS}
 
-subindel: SUBindel.c core.h subread.h  ${ALL_OBJECTS}
-	${CC} -o subindel SUBindel.c ${ALL_OBJECTS} ${LDFLAGS}
+# subindel: SUBindel.c core.h subread.h  ${ALL_OBJECTS}
+# 	${CC} -o subindel SUBindel.c ${ALL_OBJECTS} ${LDFLAGS}
 
-featureCounts: readSummary.c subread.h  ${ALL_OBJECTS}
-	${CC} -o featureCounts readSummary.c ${ALL_OBJECTS} ${LDFLAGS}
+# featureCounts: readSummary.c subread.h  ${ALL_OBJECTS}
+# 	${CC} -o featureCounts readSummary.c ${ALL_OBJECTS} ${LDFLAGS}
 
-subread-align: core-interface-aligner.c  ${ALL_OBJECTS}
-	${CC} -o subread-align core-interface-aligner.c  ${ALL_OBJECTS} ${LDFLAGS} 
+subread-align.o: core-interface-aligner.c  ${ALL_OBJECTS}
+	${CC} -r -o subread-align.o core-interface-aligner.c  ${ALL_OBJECTS} ${LDFLAGS} 
 
-subjunc: core-interface-subjunc.c  ${ALL_OBJECTS}
-	${CC} -o subjunc core-interface-subjunc.c  ${ALL_OBJECTS} ${LDFLAGS} 
+# subjunc: core-interface-subjunc.c  ${ALL_OBJECTS}
+# 	${CC} -o subjunc core-interface-subjunc.c  ${ALL_OBJECTS} ${LDFLAGS} 
 
-subtools: subtools.c ${ALL_OBJECTS}
-	${CC} -o subtools subtools.c ${ALL_OBJECTS} ${LDFLAGS} 
+# subtools: subtools.c ${ALL_OBJECTS}
+# 	${CC} -o subtools subtools.c ${ALL_OBJECTS} ${LDFLAGS} 
 
-qualityScores: qualityScores.c ${ALL_OBJECTS}
-	${CC} -o qualityScores qualityScores.c  ${ALL_OBJECTS}  ${LDFLAGS}
+# qualityScores: qualityScores.c ${ALL_OBJECTS}
+# 	${CC} -o qualityScores qualityScores.c  ${ALL_OBJECTS}  ${LDFLAGS}
 
-subread-fullscan: fullscan.c  ${ALL_OBJECTS}
-	${CC} -o subread-fullscan fullscan.c  ${ALL_OBJECTS}  ${LDFLAGS}
+# subread-fullscan: fullscan.c  ${ALL_OBJECTS}
+# 	${CC} -o subread-fullscan fullscan.c  ${ALL_OBJECTS}  ${LDFLAGS}
 
 clean:
 	rm -f core featureCounts exactSNP removeDup subread-buildindex ${ALL_OBJECTS}
diff --git a/Tool_src/subread-2.0.1/src/SNPCalling.c b/Tool_src/subread-2.0.1/src/SNPCalling.c
index 193f918..f61ca6d 100644
--- a/Tool_src/subread-2.0.1/src/SNPCalling.c
+++ b/Tool_src/subread-2.0.1/src/SNPCalling.c
@@ -1225,19 +1225,21 @@ int parse_read_lists_maybe_threads(char * in_FASTA_file, char * out_BED_file, ch
 		parameters -> output_fp_lock = malloc(sizeof(*parameters -> output_fp_lock));
 		pthread_spin_init(parameters -> output_fp_lock ,  PTHREAD_PROCESS_PRIVATE);
 
-		int i;
-		for(i=0; i<all_threads; i++)
-		{
-			param.thread_id = i;
-			pthread_create(runners+i, NULL,  parse_read_lists_wrapper, &param);
-			pthread_spin_lock(&param.init_lock);
-		}
+		// int i;
+		// for(i=0; i<all_threads; i++)
+		// {
+			// param.thread_id = i;
+			// pthread_create(runners+i, NULL,  parse_read_lists_wrapper, &param);
+			// pthread_spin_lock(&param.init_lock);
+		// }
+        param.thread_id = 0;
+        parse_read_lists_wrapper(&param);
 
 		
-		for (i=0; i< all_threads; i++)
-		{
-			pthread_join(*(runners+i), NULL);
-		}
+		// for (i=0; i< all_threads; i++)
+		// {
+		// 	pthread_join(*(runners+i), NULL);
+		// }
 		free((void *)parameters -> output_fp_lock);
 	}
 	//fprintf(out_fp, "## Fisher_Test_Size=%u\n",fisher_test_size);
diff --git a/Tool_src/subread-2.0.1/src/core-indel.c b/Tool_src/subread-2.0.1/src/core-indel.c
index 874032a..9a89509 100644
--- a/Tool_src/subread-2.0.1/src/core-indel.c
+++ b/Tool_src/subread-2.0.1/src/core-indel.c
@@ -300,7 +300,8 @@ int anti_supporting_read_scan(global_context_t * global_context)
 	pthread_t AThreads[64];
 	
 	int thread_no, last_end = 0;
-	for(thread_no=0; thread_no< global_context -> config.all_threads; thread_no++){
+	// for(thread_no=0; thread_no< global_context -> config.all_threads; thread_no++){
+        thread_no=0;
 		AT_context_t * atc = ATconts + thread_no;
 		atc -> thread_id = thread_no;
 		atc -> block_start = last_end;
@@ -313,15 +314,17 @@ int anti_supporting_read_scan(global_context_t * global_context)
 		atc -> large_side_ordered_event_ids = large_side_ordered_event_ids;
 		atc -> event_space = event_space;
 
-		pthread_create(AThreads + thread_no , NULL, anti_support_thread_run, atc);
-	}
+		// pthread_create(AThreads + thread_no , NULL, anti_support_thread_run, atc);
+        anti_support_thread_run(atc);
+	// }
 
-	for(thread_no=0; thread_no< global_context -> config.all_threads; thread_no++){
-		pthread_join(AThreads[thread_no], NULL);
+	// for(thread_no=0; thread_no< global_context -> config.all_threads; thread_no++){
+		// pthread_join(AThreads[thread_no], NULL);
+        thread_no=0;
 		ATconts[thread_no].result_tab -> appendix1 = event_space;
 		HashTableIteration( ATconts[thread_no].result_tab, anti_support_add_count );
 		HashTableDestroy(ATconts[thread_no].result_tab);
-	}
+	// }
 
 	free(small_side_ordered_event_ids);
 	free(large_side_ordered_event_ids);
@@ -707,10 +710,10 @@ int init_indel_tables(global_context_t * context)
 	if(context -> config.all_threads < 2) {
 		indel_context -> event_entry_table = HashTableCreate(399997);
 
-		indel_context -> event_entry_table -> appendix1=malloc(1024 * 1024 * 64);
-		indel_context -> event_entry_table -> appendix2=malloc(1024 * 1024 * 64);
-		memset(indel_context -> event_entry_table -> appendix1, 0, 1024 * 1024 * 64);
-		memset(indel_context -> event_entry_table -> appendix2, 0, 1024 * 1024 * 64);
+		indel_context -> event_entry_table -> appendix1=malloc(1024 * 1024 * 32);//JZ change 64 to 32
+		indel_context -> event_entry_table -> appendix2=malloc(1024 * 1024 * 32);//JZ change 64 to 32
+		memset(indel_context -> event_entry_table -> appendix1, 0, 1024 * 1024 * 32);//JZ change 64 to 32
+		memset(indel_context -> event_entry_table -> appendix2, 0, 1024 * 1024 * 32);//JZ change 64 to 32
 
 		HashTableSetKeyComparisonFunction(indel_context->event_entry_table, localPointerCmp_forEventEntry);
 		HashTableSetHashFunction(indel_context->event_entry_table, localPointerHashFunction_forEventEntry);
@@ -725,12 +728,13 @@ int init_indel_tables(global_context_t * context)
 		}
 	}
 	if(context->config.is_third_iteration_running) {
-		char * fns = malloc(200);
-		fns[0]=0;
-		exec_cmd("ulimit -n", fns, 200);
-		int max_open_file = atoi(fns);
-		//SUBREADprintf("SYS FILE LIMIT=%d\n", max_open_file);
-		free(fns);
+		// char * fns = malloc(200);
+		// fns[0]=0;
+		// exec_cmd("ulimit -n", fns, 200);
+		// int max_open_file = atoi(fns);
+		// //SUBREADprintf("SYS FILE LIMIT=%d\n", max_open_file);
+		// free(fns);
+        int max_open_file = 1024;
 		max_open_file = max(100, max_open_file);
 		max_open_file = min(3000, max_open_file);
 
@@ -2345,7 +2349,7 @@ int write_indel_final_results(global_context_t * global_context)
 		}
 
 		//assert(event_body -> event_small_side < event_body -> event_large_side );
-		locate_gene_position( event_body -> event_small_side , &global_context -> chromosome_table, &chro_name, &chro_pos);
+		locate_gene_position( event_body -> event_small_side+1 , &global_context -> chromosome_table, &chro_name, &chro_pos); // JZ event_small_side +1
 
 		// VCF format: chr21  1000001  .   AACC  AAGGGGGCC  29  .  INDEL;DP=20
 		if(event_body -> event_type == CHRO_EVENT_TYPE_INDEL || event_body -> event_type == CHRO_EVENT_TYPE_LONG_INDEL)
@@ -2353,12 +2357,12 @@ int write_indel_final_results(global_context_t * global_context)
 			ref_bases[0]=0;
 			alt_bases[0]=0;
 
-			gene_value_index_t * current_index = find_current_value_index(global_context , event_body -> event_small_side-1 , max(0, event_body -> indel_length) + 2);
+			gene_value_index_t * current_index = find_current_value_index(global_context , event_body -> event_small_side , max(0, event_body -> indel_length) + 2); // JZ event_small_side +1
 			if(current_index)
 			{
 				int rlen = max(0, event_body -> indel_length) + 2;
 				assert(rlen<900);
-				gvindex_get_string(ref_bases, current_index, event_body -> event_small_side-1 , rlen, 0);
+				gvindex_get_string(ref_bases, current_index, event_body -> event_small_side , rlen, 0); // JZ event_small_side +1
 				ref_bases[rlen] = 0;
 
 				if(event_body -> indel_length > 0)  // deletion
@@ -2382,7 +2386,8 @@ int write_indel_final_results(global_context_t * global_context)
 				else	event_body -> event_quality = 1;
 
 			}
-			int write_len = fprintf(ofp, "%s\t%u\t.\t%s\t%s\t%d\t.\tINDEL;DP=%d;SR=%d\n", chro_name, chro_pos, ref_bases, alt_bases, (int)(max(1, 250 + 10*log(event_body -> event_quality)/log(10))), event_body -> final_counted_reads + event_body -> anti_supporting_reads, event_body -> final_counted_reads);
+			// int write_len = fprintf(ofp, "%s\t%u\t.\t%s\t%s\t%d\t.\tINDEL;DP=%d;SR=%d\n", chro_name, chro_pos, ref_bases, alt_bases, (int)(max(1, 250 + 10*log(event_body -> event_quality)/log(10))), event_body -> final_counted_reads + event_body -> anti_supporting_reads, event_body -> final_counted_reads);
+            int write_len = fprintf(ofp, "%s\t%u\t.\t%s\t%s\t%d\t.\tINDEL;DP=%d;SR=%d\n", chro_name, chro_pos, ref_bases, alt_bases, (int)(max(1, 250 + 10*log(event_body -> event_quality)/log(10))), event_body -> anti_supporting_reads, event_body -> final_counted_reads); // JZ changed: seems anti_supporting_reads is the total coverage
 			if(write_len < 10) disk_is_full = 1;
 		}
 
@@ -4551,7 +4556,7 @@ void init_global_context(global_context_t * context)
 	context->config.is_first_iteration_running = 1;
 	context->config.is_second_iteration_running = 1;
 
-	context->config.reads_per_chunk = 20*1024*1024;
+	context->config.reads_per_chunk = 5*1024*1024; // Junli change from 20 to 5: this reduced the memeory usage
 
 //#warning "=========== 2*1024*1024 IS FOR TESTING BLOCKING AND SHOULD BE COMMENTED ==============="
 //	context->config.reads_per_chunk = 2*1024*1024;
diff --git a/Tool_src/subread-2.0.1/src/core-interface-aligner.c b/Tool_src/subread-2.0.1/src/core-interface-aligner.c
index 4aec0b7..ce55f79 100644
--- a/Tool_src/subread-2.0.1/src/core-interface-aligner.c
+++ b/Tool_src/subread-2.0.1/src/core-interface-aligner.c
@@ -261,8 +261,9 @@ int parse_opts_aligner(int argc , char ** argv, global_context_t * global_contex
 	opterr = 1;
 	optopt = 63;
 
+    // SUBREADprintf("check point 2-1\n");
 	subread_rebuild_cmd(argc, argv, global_context);
-
+    // SUBREADprintf("check point 2-2\n");
 	global_context->config.entry_program_name = CORE_PROGRAM_SUBREAD;
 	global_context->config.max_mismatch_exonic_reads = 3;
 	global_context->config.max_mismatch_junction_reads = 3;
@@ -288,7 +289,7 @@ int parse_opts_aligner(int argc , char ** argv, global_context_t * global_contex
 	}
 
 */
-
+    // SUBREADprintf("check point 2-3\n");
 	while ((c = getopt_long (argc, argv, "xsvJS:L:A:a:Hd:D:n:m:p:G:E:X:Y:P:R:r:i:l:o:T:I:t:B:bF:cuUfM:Q1:2:3:5:?", long_options, &option_index)) != -1)
 	{
 		switch(c)
@@ -627,7 +628,7 @@ int parse_opts_aligner(int argc , char ** argv, global_context_t * global_contex
 				return -1 ;
 		}
 	}
-
+    // SUBREADprintf("check point 2-4\n");
 	if(argc > optind){
 		SUBREADprintf("Invalid parameter '%s'\n", argv[optind]);
 		return -1;
@@ -672,10 +673,11 @@ int subread_aligner_main(int argc , char ** argv)
 int main_align(int argc , char ** argv)
 {
 #endif
-
+    // SUBREADprintf("check point 2-5\n");
 //	printf("SIZE_OF_ALN=%d\n", sizeof(mapping_result_t));
 //	printf("SIZE_OF_VOT=%d\n", sizeof(voting_context_t));
 	int ret = core_main(argc, argv, parse_opts_aligner);
+    // SUBREADprintf("check point 2-6\n");
 	return ret;
 }
 
diff --git a/Tool_src/subread-2.0.1/src/core.c b/Tool_src/subread-2.0.1/src/core.c
index deb6a8d..ab5f8ed 100644
--- a/Tool_src/subread-2.0.1/src/core.c
+++ b/Tool_src/subread-2.0.1/src/core.c
@@ -234,7 +234,7 @@ void print_in_box(int line_width, int is_boundary, int options, char * pattern,.
 					txt_len++;
 					if(txt_len == 80 - 9)
 					{
-						strcpy(content+x1, "\x1b[0m ...");
+						strcpy(content+x1, " ...");
 						content_len = line_width - 4;
 						content_len = 80 - 4;
 						line_width = 80;
@@ -264,9 +264,9 @@ void print_in_box(int line_width, int is_boundary, int options, char * pattern,.
 			int right_stars = line_width - content_len - 2 - left_stars;
 			strcat(out_line_buff,is_boundary==1?"//":"\\\\");
 			for(x1=0;x1<left_stars-2;x1++) strcat(out_line_buff,"=");
-			sprintf(out_line_buff+strlen(out_line_buff),"%c[36m", CHAR_ESC);
+			sprintf(out_line_buff+strlen(out_line_buff), "");
 			sprintf(out_line_buff+strlen(out_line_buff)," %s ", content);
-			sprintf(out_line_buff+strlen(out_line_buff),"%c[0m", CHAR_ESC);
+			sprintf(out_line_buff+strlen(out_line_buff), "");
 			for(x1=0;x1<right_stars-2;x1++) strcat(out_line_buff,"=");
 			strcat(out_line_buff,is_boundary==1?"\\\\":"//");
 			sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO, "%s", out_line_buff);
@@ -317,9 +317,9 @@ void print_in_box(int line_width, int is_boundary, int options, char * pattern,.
 				content[col1w+1]=0;
 				strcat(out_line_buff,content);
 				strcat(out_line_buff," ");
-				sprintf(out_line_buff+strlen(out_line_buff),"%c[36m", CHAR_ESC);
+				sprintf(out_line_buff+strlen(out_line_buff), "");
 				strcat(out_line_buff,content+col1w+2);
-				sprintf(out_line_buff+strlen(out_line_buff),"%c[0m", CHAR_ESC);
+				sprintf(out_line_buff+strlen(out_line_buff), "");
 			}
 			else
 				strcat(out_line_buff,content);
@@ -331,7 +331,7 @@ void print_in_box(int line_width, int is_boundary, int options, char * pattern,.
 		spaces[78]='|';
 		
 		right_spaces = max(1,right_spaces);
-		sprintf(out_line_buff+strlen(out_line_buff)," %c[0m%s", CHAR_ESC , spaces + (78 - right_spaces + 1));
+		sprintf(out_line_buff+strlen(out_line_buff)," %s", spaces + (78 - right_spaces + 1));
 		sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO, out_line_buff);
 	}
 	free(out_line_buff);
@@ -391,7 +391,7 @@ int show_summary(global_context_t * global_context)
 	}
 
 	print_in_box(80,0,1,"  ");
-	print_in_box(89,0,1,"  %c[36mCompleted successfully.%c[0m", CHAR_ESC, CHAR_ESC);
+	print_in_box(80,0,1,"  Completed successfully.");
 	print_in_box(80,0,1,"  ");
 	print_in_box(80,2,1,"  ");
 	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO, "");
@@ -811,10 +811,10 @@ int check_configuration(global_context_t * global_context)
 		return -1;
 	}
 
-	if(4 == sizeof(void *) && global_context->config.sort_reads_by_coordinates){
-		SUBREADputs("ERROR: the sort by coordinate function only works on 64-bit computers.");
-		return -1;
-	}
+	// if(4 == sizeof(void *) && global_context->config.sort_reads_by_coordinates){
+	// 	SUBREADputs("ERROR: the sort by coordinate function only works on 64-bit computers.");
+	// 	return -1;
+	// }
 
 	if(global_context->config.is_input_read_order_required && global_context->config.sort_reads_by_coordinates){
 		SUBREADputs("ERROR: you shouldn't specify keep input order and sort by coordinate at same time.");
@@ -875,27 +875,32 @@ int myrand_rand(){
 
 int core_main(int argc , char ** argv, int (parse_opts (int , char **, global_context_t * )))
 {
-	struct timeval xtime; 
+	// int ck = 0;
+    // SUBREADprintf("check point 1\n");
+    struct timeval xtime; 
 	gettimeofday(&xtime,NULL);
 	myrand_srand(time(NULL)^xtime.tv_usec);
 
-	global_context_t * global_context;
+	// SUBREADprintf("check point 2\n");
+    global_context_t * global_context;
 	global_context = (global_context_t*)malloc(sizeof(global_context_t));
 	memset(global_context, 0, sizeof(global_context_t));
 	init_global_context(global_context);
 
-
+    // SUBREADprintf("check point 3\n");
 	int ret = parse_opts(argc , argv, global_context);
 	init_core_temp_path(global_context);
 	//global_context->config.reads_per_chunk = 200*1024;
 
-	if(global_context->config.max_indel_length > 20 && !global_context->input_reads.is_paired_end_reads)
+    // SUBREADprintf("check point 4\n");
+    if(global_context->config.max_indel_length > 20 && !global_context->input_reads.is_paired_end_reads)
 	{
 		global_context->config.total_subreads = 28;
 		global_context->config.reassembly_start_read_number = 3;
 		global_context->config.do_superlong_indel_detection = 1;
 	}
 
+    // SUBREADprintf("check point 5\n");
 	if(global_context->config.fast_run){
 		global_context -> config.top_scores = 1;
 		global_context -> config.max_vote_combinations = 1;
@@ -903,14 +908,23 @@ int core_main(int argc , char ** argv, int (parse_opts (int , char **, global_co
 		global_context -> config.multi_best_reads = 1;
 	}
 
+    // SUBREADprintf("check point 6\n");
 	ret = ret || print_configuration(global_context);
+    // SUBREADprintf("check point 7\n");
 	ret = ret || check_configuration(global_context);
+    // SUBREADprintf("check point 8\n");
 	ret = ret || load_global_context(global_context);
+    // SUBREADprintf("check point 9\n");
 	ret = ret || init_modules(global_context);
+    // SUBREADprintf("check point 10\n");
 	ret = ret || read_chunk_circles(global_context);
+    // SUBREADprintf("check point 11\n");
 	ret = ret || write_final_results(global_context);
+    // SUBREADprintf("check point 12\n");
 	ret = ret || destroy_modules(global_context);
+    // SUBREADprintf("check point 13\n");
 	ret = ret || destroy_global_context(global_context);
+    // SUBREADprintf("check point 14\n");
 	ret = ret || show_summary(global_context);
 
 	free(global_context);
@@ -3727,12 +3741,12 @@ void char_strftime(char * tbuf){
 
 void print_subread_logo()
 {
-	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"       %c[44;37m ========== %c[0m%c[36m    _____ _    _ ____  _____  ______          _____  ", CHAR_ESC, CHAR_ESC, CHAR_ESC);
-	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"       %c[44;37m =====      %c[0m%c[36m   / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ ", CHAR_ESC, CHAR_ESC, CHAR_ESC);
-	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"       %c[44;37m   =====    %c[0m%c[36m  | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |", CHAR_ESC, CHAR_ESC, CHAR_ESC);
-	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"       %c[44;37m     ====   %c[0m%c[36m   \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |", CHAR_ESC, CHAR_ESC, CHAR_ESC);
-	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"       %c[44;37m       ==== %c[0m%c[36m   ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |", CHAR_ESC, CHAR_ESC, CHAR_ESC);
-	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"       %c[44;37m ========== %c[0m%c[36m  |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/%c[0m", CHAR_ESC, CHAR_ESC, CHAR_ESC, CHAR_ESC);
+	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"        ==========     _____ _    _ ____  _____  ______          _____  ");
+	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ ");
+	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |");
+	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |");
+	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |");
+	sublog_printf(SUBLOG_STAGE_RELEASED, SUBLOG_LEVEL_INFO ,"        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/");
 	#ifdef MAKE_STANDALONE
 	char * spaces = "";
 	if(strlen(SUBREAD_VERSION) == 8) spaces = "";
@@ -4064,7 +4078,7 @@ int load_global_context(global_context_t * context)
 	}
 
 	context->config.space_type = context->input_reads.first_read_file.space_type;
-	print_in_box(89,0,0,"The input file contains %c[36m%s%c[0m space reads.", CHAR_ESC, context->config.space_type == GENE_SPACE_COLOR?"color":"base", CHAR_ESC);
+	print_in_box(80,0,0,"The input file contains %s space reads.", context->config.space_type == GENE_SPACE_COLOR?"color":"base");
 	if(context->config.space_type == GENE_SPACE_COLOR && context->config.is_BAM_output && !context->config.convert_color_to_base)
 	{
 		print_in_box(80,0,0,"The color-space bases will be converted into base space in the BAM output.");
diff --git a/Tool_src/subread-2.0.1/src/gene-algorithms.h b/Tool_src/subread-2.0.1/src/gene-algorithms.h
index ff54fd1..ccb1f9b 100644
--- a/Tool_src/subread-2.0.1/src/gene-algorithms.h
+++ b/Tool_src/subread-2.0.1/src/gene-algorithms.h
@@ -60,7 +60,7 @@ void add_allvote_q(gene_allvote_t* allvote,int qid , int pos, gene_vote_number_t
 
 unsigned char get_next_char(FILE * fp);
 
-unsigned char * replica_index;
+// unsigned char * replica_index;
 
 extern double begin_ftime;
 
diff --git a/Tool_src/subread-2.0.1/src/index-builder.c b/Tool_src/subread-2.0.1/src/index-builder.c
index b4a27ee..63dc75a 100644
--- a/Tool_src/subread-2.0.1/src/index-builder.c
+++ b/Tool_src/subread-2.0.1/src/index-builder.c
@@ -477,7 +477,7 @@ int scan_gene_index(const char index_prefix [], char ** chro_files, int chro_fil
 	unsigned char * huge_index[128];
 
 	for(i=0;i<128;i++) {
-		huge_index[i] = calloc(1024*1024*16,1);
+		huge_index[i] = calloc(1024*1024*4,1); // junli changed *16 to *4 to only locate 512 Mb totally
 		if(NULL == huge_index[i]){ 
 			SUBREADprintf("ERROR: No memory can be allocated.\nThe program has to terminate\n");
 			return -1;
@@ -977,7 +977,7 @@ int check_and_convert_FastA(char ** input_fas, int fa_number, char * out_fa, uns
 	if(ERROR_FOUND_IN_FASTA)
 	{
 		print_in_box( 80,0,0,"There were %d notes for reference sequences.", ERROR_FOUND_IN_FASTA);
-		print_in_box( 89,0,0,"The notes can be found in the log file, %c[36m'%s'%c[0m.", CHAR_ESC, log_fn, CHAR_ESC);
+		print_in_box( 89,0,0,"The notes can be found in the log file, '%s'", log_fn);
 	}
 	else	print_in_box( 80,0,0,"No format issues were found");
 
@@ -1146,10 +1146,12 @@ int main_buildindex(int argc,char ** argv)
 
 	print_subread_logo();
 	size_t free_mem=-1, total_mem=-1;
-	if(get_free_total_mem( &total_mem, &free_mem )){
-		free_mem=-1;
-		total_mem=-1;
-	}
+	// if(get_free_total_mem( &total_mem, &free_mem )){
+	// 	free_mem=-1;
+	// 	total_mem=-1;
+	// }
+    free_mem = 1.5*1024*1024*1024;
+    total_mem = 2.*1024*1024*1024;
 
 	SUBREADputs("");
 	print_in_box(80, 1, 1, "setting");
@@ -1191,7 +1193,7 @@ int main_buildindex(int argc,char ** argv)
 		if(f_type == FILE_TYPE_GZIP_FASTA){
 			o_char = 'o';
 		}
-		print_in_box(94, 0, 0, "                            %c[32m%c%c[36m %s%c[0m", CHAR_ESC, o_char, CHAR_ESC,  get_short_fname(fasta_fn) , CHAR_ESC);
+		print_in_box(80, 0, 0, "                            %c %s", o_char, get_short_fname(fasta_fn));
 	}
 	print_in_box(80, 0, 0, "");
 	
@@ -1279,7 +1281,7 @@ int main_buildindex(int argc,char ** argv)
 
 		if(!ret){
 			print_in_box(80, 0, 1, "Total running time: %.1f minutes.", (miltime()-begin00_ftime)/60);
-			print_in_box(89, 0, 1, "Index %c[36m%s%c[0m was successfully built!", CHAR_ESC, output_file, CHAR_ESC);
+			print_in_box(80, 0, 1, "Index %s was successfully built!", output_file);
 		}
 		HashTableDestroy(huge_table);
 		free(chromosome_lengths);
diff --git a/Tool_src/subread-2.0.1/src/input-blc.c b/Tool_src/subread-2.0.1/src/input-blc.c
index cfdd706..a224da6 100644
--- a/Tool_src/subread-2.0.1/src/input-blc.c
+++ b/Tool_src/subread-2.0.1/src/input-blc.c
@@ -407,11 +407,12 @@ int cacheBCL_next_chunk(cache_BCL_t * cache_input){
 	pthread_t * threads = malloc(sizeof(pthread_t)*cache_input -> all_threads);
 	iCache_continuous_read_lanes( cache_input, -1 ); // read filtering binary
 
-	for(x1=0; x1<cache_input -> all_threads; x1++)
-		pthread_create(threads+x1, NULL, iCache_decompress_chunk_1T, cache_input);
+	// for(x1=0; x1<cache_input -> all_threads; x1++)
+	// 	pthread_create(threads+x1, NULL, iCache_decompress_chunk_1T, cache_input);
+    iCache_decompress_chunk_1T(cache_input);
 
-	for(x1=0; x1<cache_input -> all_threads; x1++)
-		pthread_join(threads[x1],NULL);
+	// for(x1=0; x1<cache_input -> all_threads; x1++)
+	// 	pthread_join(threads[x1],NULL);
 	free(threads);
 	cache_input -> read_no_in_chunk = 0;
 	cache_input -> chunk_no ++;
diff --git a/Tool_src/subread-2.0.1/src/input-files.c b/Tool_src/subread-2.0.1/src/input-files.c
index cde6f98..0553c33 100644
--- a/Tool_src/subread-2.0.1/src/input-files.c
+++ b/Tool_src/subread-2.0.1/src/input-files.c
@@ -51,7 +51,8 @@ FILE * f_subr_open(const char * fname, const char * mode)
 #if defined(__LP64__) || defined(_LP64) || defined(MACOS) 
 		return fopen(fname, mode);
 #else
-		return fopen64(fname, mode);
+		// return fopen64(fname, mode);
+        return fopen(fname, mode);
 #endif
 #endif
 
@@ -73,7 +74,8 @@ void * delay_realloc(void * old_pntr, size_t old_size, size_t new_size){
 	pthread_t thread;
 	void * new_ret = malloc(new_size);
 	memcpy(new_ret, old_pntr, old_size);
-	pthread_create(&thread, NULL, delay_run, old_pntr);
+	// pthread_create(&thread, NULL, delay_run, old_pntr);
+    delay_run(old_pntr);
 	return new_ret;
 }
 
@@ -1797,12 +1799,13 @@ int break_SAM_file(char * in_SAM_file, int is_BAM_file, char * temp_file_prefix,
 	HashTableSetKeyComparisonFunction(fp_table, my_strcmp);
 	HashTableSetHashFunction(fp_table,HashTableStringHashFunction);
 
-	char * fns = malloc(200);
-	fns[0]=0;
-	exec_cmd("ulimit -n", fns, 200);
-	int max_open_file = atoi(fns);
+	// char * fns = malloc(200);
+	// fns[0]=0;
+	// exec_cmd("ulimit -n", fns, 200);
+	// int max_open_file = atoi(fns);
 	//SUBREADprintf("SYS FILE LIMIT=%d\n", max_open_file);
-	free(fns);
+	// free(fns);
+    int max_open_file = 1024;
 
 	max_open_file = max(100, max_open_file);
 	max_open_file = min(3000, max_open_file);
@@ -4615,19 +4618,20 @@ void  SAM_pairer_finish_margin_table( SAM_pairer_context_t * pairer){
 // not only run, but also finalise.
 // It returns 0 if no error.
 int SAM_pairer_run_once( SAM_pairer_context_t * pairer){
-	int x1;
-	for(x1 = 0; x1 < pairer -> total_threads ; x1++){
+	int x1 = 0;
+	// for(x1 = 0; x1 < pairer -> total_threads ; x1++){
 		// this 16-byte memory block is freed in the thread worker.
 		void ** init_params = malloc(sizeof(void *) * 2);
 
 		init_params[0] = pairer;
 		init_params[1] = (void *)(NULL+x1);
-		pthread_create(&(pairer -> threads[x1].thread_stab), NULL, SAM_pairer_thread_run, init_params);
-	}
+		// pthread_create(&(pairer -> threads[x1].thread_stab), NULL, SAM_pairer_thread_run, init_params);
+        SAM_pairer_thread_run(init_params);
+	// }
 
-	for(x1 = 0; x1 < pairer -> total_threads ; x1++){
-		pthread_join(pairer -> threads[x1].thread_stab, NULL);
-	}
+	// for(x1 = 0; x1 < pairer -> total_threads ; x1++){
+	// 	pthread_join(pairer -> threads[x1].thread_stab, NULL);
+	// }
 
 	if(0 == pairer -> is_bad_format){
 		if(pairer -> input_is_BAM) SAM_pairer_finish_margin_table(pairer);
@@ -4636,19 +4640,20 @@ int SAM_pairer_run_once( SAM_pairer_context_t * pairer){
 			SUBREADprintf("ERROR: cannot write into the temporary file. Please check the disk space in the output directory.\n");
 			pairer -> is_internal_error = 1;
 		}else{
-			for(x1 = 0; x1 < pairer -> total_threads ; x1++){
+			// for(x1 = 0; x1 < pairer -> total_threads ; x1++){
 				// this 16-byte memory block is freed in the thread worker.
 
 				void ** init_params = malloc(sizeof(void *) * 2);
 
 				init_params[0] = pairer;
 				init_params[1] = (void *)(NULL+x1);
-				pthread_create(&(pairer -> threads[x1].thread_stab), NULL, SAM_pairer_rescure_orphants_max_FP, init_params);
-			}
+				// pthread_create(&(pairer -> threads[x1].thread_stab), NULL, SAM_pairer_rescure_orphants_max_FP, init_params);
+                SAM_pairer_rescure_orphants_max_FP(init_params);
+			// }
 
-			for(x1 = 0; x1 < pairer -> total_threads ; x1++){
-				pthread_join(pairer -> threads[x1].thread_stab, NULL);
-			}
+			// for(x1 = 0; x1 < pairer -> total_threads ; x1++){
+			// 	pthread_join(pairer -> threads[x1].thread_stab, NULL);
+			// }
 		}
 	}
 
@@ -5237,15 +5242,16 @@ int SAM_nosort_decompress_next_block(SAM_pairer_context_t * pairer){
 #define NOSORT_REFILL_HIGHBAR ( 6 * 1024 * 1024  ) 
 
 void SAM_nosort_run_once(SAM_pairer_context_t * pairer){
-	int x1;
-	for(x1 = 0; x1 < pairer -> total_threads ; x1++){
+	int x1 = 0;
+	// for(x1 = 0; x1 < pairer -> total_threads ; x1++){
 		// this 16-byte memory block is freed in the thread worker.
 		void ** init_params = malloc(sizeof(void *) * 2);
 
 		init_params[0] = pairer;
 		init_params[1] = (void *)(NULL+x1);
-		pthread_create(&(pairer -> threads[x1].thread_stab), NULL, SAM_nosort_thread_run, init_params);
-	}
+		// pthread_create(&(pairer -> threads[x1].thread_stab), NULL, SAM_nosort_thread_run, init_params);
+        SAM_nosort_thread_run(init_params);
+	// }
 
 	char * SBAM_buff = malloc(NOSORT_SBAM_BUFF_SIZE);
 	int nch;
@@ -5479,9 +5485,9 @@ void SAM_nosort_run_once(SAM_pairer_context_t * pairer){
 	free(BIN_buff);
 
 
-	for(x1 = 0; x1 < pairer -> total_threads ; x1++){
-		pthread_join(pairer -> threads[x1].thread_stab, NULL);
-	}
+	// for(x1 = 0; x1 < pairer -> total_threads ; x1++){
+	// 	pthread_join(pairer -> threads[x1].thread_stab, NULL);
+	// }
 }
 
 #define BINADD_NCHAR {			if(binptr >= bin_buff_capacity - 10){\
